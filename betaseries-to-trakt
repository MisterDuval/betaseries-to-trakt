#!/usr/bin/env php
<?php

// You must create an application to obtain the followings
// https://trakt.tv/oauth/applications/new
$config = [
    'client_id'     => '',
    'client_secret' => ''
];

/***** CONFIGURATION END *****/

function usage($binName) {
    exit("Usage: ${binName} \"path/to/betaseries_file.csv\"\n");
}

function call($method, $url, $data = false, $customHeaders = false)
{
    global $config;

    $curl = curl_init();

    switch ($method)
    {
        case 'POST':
            curl_setopt($curl, CURLOPT_POST, TRUE);
            if ($data) {
                curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));
            }
            break;
        case 'PUT':
            curl_setopt($curl, CURLOPT_PUT, TRUE);
            break;
        default:
            if ($data) {
                $url = sprintf("%s?%s", $url, http_build_query($data));
            }
    }

    $headers = [
        'Content-Type: application/json',
        'trakt-api-version: 2',
        'trakt-api-key: ' . $config['client_id']
    ];
    if ($customHeaders) {
        $headers = array_merge($headers, $customHeaders);
    }

    curl_setopt($curl, CURLOPT_URL, 'https://api-v2launch.trakt.tv' . $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($curl, CURLOPT_HEADER, FALSE);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($curl);

    curl_close($curl);

    return json_decode($result);
}

/***** BEGINING OF LOGIC *****/

if (!isset($config['client_secret']) || !isset($config['client_secret'])) {
    exit("Please check the configuration variables at the top of the file.\n");
}

if (!isset($argv[1])) {
    usage($argv[0]);
}

$file = fopen($argv[1], 'r');
if ($file === FALSE) {
    exit("{$argv[1]} not found\n");
}

echo "Please go at your app PIN url ( https://trakt.tv/pin/XXXXX ) and authorize your application.\n";
echo "After, a PIN of 8 digits will be displayed (only valid 1 time). Please enter it here.\n";

$authPin = readline("Pin: ");

$postDatas = [
    'code'          => $authPin,
    'client_id'     => $config['client_id'],
    'client_secret' => $config['client_secret'],
    'redirect_uri'  => 'urn:ietf:wg:oauth:2.0:oob',
    'grant_type'    => 'authorization_code'
];

echo "Authentificating...";

$obj = call('POST', '/oauth/token', $postDatas);
if (!isset($obj->access_token)) {
    echo "\nERROR: $obj->error: $obj->error_description\n";
    exit("Unable to retrieve the access_token\n");
}

$accessToken = $obj->access_token;
echo "\t\tOK\n";

echo "Building query...";

$body = [
    'shows' => []
];

while (($line = fgetcsv($file, 0, ',')) !== FALSE) {
    // Skip first line
    if ($line[0] === 'id') {
        continue;
    }

    $tvdbId   = $line[1];
    $name     = $line[2];
    preg_match('/S([0-9]+)E([0-9]+)/', $line[4], $lastSeen);
    $status   = $line[6];

    $show = [
        'title' => $name,
        'ids' => [
            'tvdb' => $tvdbId
        ],
        'watched_at' => 'released'
    ];

    if ($status != 100) {
        $show['seasons'] = [];

        for ($s = 1; $s <= $lastSeen[1]; $s++) {
            $season = [
                'number' => $s,
                'watched_at' => 'released'
            ];
            array_push($show['seasons'], $season);

            if ($s == $lastSeen[1]) {
                $sIdx = $s - 1;
                $show['seasons'][$sIdx]['episodes'] = [];

                for ($e = 1; $e <= $lastSeen[2]; $e++) {
                    $episode = [
                        'number' => $e,
                        'watched_at' => 'released'
                    ];
                    array_push($show['seasons'][$sIdx]['episodes'], $episode);
                }
            }

        }
    }

    array_push($body['shows'], $show);
}
echo "\t\tOK\n";

echo "Sending datas to Trakt.tv...";
$resp = call('POST', '/sync/history', $body, ["Authorization: Bearer $accessToken"]);
echo "\tOK\n";

if (isset($resp->added)) {
    echo "We have added:\n";
    echo "\t{$resp->added->movies} movies\n";
    echo "\t{$resp->added->episodes} episodes\n";
}
